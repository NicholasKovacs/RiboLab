function [ Variability, F ] = ShannonEntropy(Alignment,varargin)
%UNTITLED2 Summary of this function goes here
%   Detailed explanation goes here
Method='Shannon';
Gaps=false();
ambiguous='Prorate';
Q=[];
normalize_flag=false();
num_iterations=3;

if nargin >1
    for ind=1:length(varargin)/2
        switch varargin{2*ind-1}
            case 'Method'
                Method=varargin{2*ind};
            case 'Gaps'
                Gaps=varargin{2*ind};
            case 'ambiguous'
                ambiguous=varargin{2*ind};
            case 'Q'
                Q=varargin{2*ind};
            case 'ClassFile'
                if ~isempty(varargin{2*ind})
                    data=importdata(varargin{2*ind});
                    data.data(isnan(data.data))=0;
                    classes=data.data;
                end
            case 'Normalize'
                normalize_flag=varargin{2*ind};
            
            case 'num_iterations'
                num_iterations=varargin{2*ind};
        end
    end
end

% switch Method
%     case {'Lichtarge35','Manny'}
%         if isempty(Q)
%             Q=[0.168100000000000,0.0222000000000000,0.0467000000000000,0.0527000000000000,0.0317000000000000,0.0848000000000000,0.0201000000000000,0.0466000000000000,0.0585000000000000,0.0626000000000000,0.0221000000000000,0.0402000000000000,0.0359000000000000,0.0340000000000000,0.0451000000000000,0.0719000000000000,0.0514000000000000,0.0633000000000000,0.0106000000000000,0.0313000000000000;0.0222000000000000,0.376900000000000,0.0178000000000000,0.0529000000000000,0.0261000000000000,0.0444000000000000,0.0333000000000000,0.0293000000000000,0.0458000000000000,0.0594000000000000,0.0180000000000000,0.0282000000000000,0.0250000000000000,0.0195000000000000,0.0208000000000000,0.0377000000000000,0.0453000000000000,0.0409000000000000,0.0299000000000000,0.0267000000000000;0.0467000000000000,0.0178000000000000,0.228900000000000,0.0813000000000000,0.0253000000000000,0.0576000000000000,0.0254000000000000,0.0324000000000000,0.0564000000000000,0.0593000000000000,0.0130000000000000,0.0704000000000000,0.0398000000000000,0.0326000000000000,0.0455000000000000,0.0527000000000000,0.0401000000000000,0.0430000000000000,0.00790000000000000,0.0240000000000000;0.0527000000000000,0.0529000000000000,0.0813000000000000,0.169600000000000,0.0260000000000000,0.0476000000000000,0.0232000000000000,0.0303000000000000,0.0738000000000000,0.00690000000000000,0.0151000000000000,0.0516000000000000,0.0461000000000000,0.0940000000000000,0.0521000000000000,0.0542000000000000,0.0450000000000000,0.0396000000000000,0.0109000000000000,0.0274000000000000;0.0317000000000000,0.0261000000000000,0.0253000000000000,0.0260000000000000,0.190300000000000,0.0250000000000000,0.0454000000000000,0.0500000000000000,0.0361000000000000,0.0586000000000000,0.0596000000000000,0.0368000000000000,0.0251000000000000,0.0325000000000000,0.0375000000000000,0.0481000000000000,0.0417000000000000,0.0678000000000000,0.0463000000000000,0.0901000000000000;0.0848000000000000,0.0444000000000000,0.0576000000000000,0.0476000000000000,0.0250000000000000,0.284200000000000,0.0201000000000000,0.0263000000000000,0.0351000000000000,0.00110000000000000,0.0178000000000000,0.0931000000000000,0.0372000000000000,0.0600000000000000,0.0536000000000000,0.0385000000000000,0.0348000000000000,0.00150000000000000,0.0101000000000000,0.0273000000000000;0.0201000000000000,0.0333000000000000,0.0254000000000000,0.0232000000000000,0.0454000000000000,0.0201000000000000,0.234400000000000,0.0352000000000000,0.0441000000000000,0.0640000000000000,0.0731000000000000,0.0392000000000000,0.0552000000000000,0.0257000000000000,0.0253000000000000,0.0554000000000000,0.0458000000000000,0.0333000000000000,0.0426000000000000,0.0592000000000000;0.0466000000000000,0.0293000000000000,0.0324000000000000,0.0303000000000000,0.0500000000000000,0.0263000000000000,0.0352000000000000,0.141600000000000,0.0441000000000000,0.120800000000000,0.0273000000000000,0.0493000000000000,0.0388000000000000,0.0369000000000000,0.0357000000000000,0.0462000000000000,0.0452000000000000,0.117300000000000,0.00890000000000000,0.0378000000000000;0.0585000000000000,0.0458000000000000,0.0564000000000000,0.0738000000000000,0.0361000000000000,0.0351000000000000,0.0441000000000000,0.0441000000000000,0.144300000000000,0.0195000000000000,0.0234000000000000,0.0636000000000000,0.0464000000000000,0.0650000000000000,0.0857000000000000,0.0573000000000000,0.0495000000000000,0.00950000000000000,0.0123000000000000,0.0300000000000000;0.0626000000000000,0.0594000000000000,0.0593000000000000,0.00690000000000000,0.0586000000000000,0.00110000000000000,0.0640000000000000,0.120800000000000,0.0195000000000000,0.202100000000000,0.0345000000000000,0.0565000000000000,0.0288000000000000,0.0622000000000000,0.0632000000000000,0.00370000000000000,0.0457000000000000,0.00120000000000000,0.0121000000000000,0.0379000000000000;0.0221000000000000,0.0180000000000000,0.0130000000000000,0.0151000000000000,0.0596000000000000,0.0178000000000000,0.0731000000000000,0.0273000000000000,0.0234000000000000,0.0345000000000000,0.0612000000000000,0.0275000000000000,0.0289000000000000,0.0310000000000000,0.0241000000000000,0.0490000000000000,0.0503000000000000,0.0714000000000000,0.305100000000000,0.0477000000000000;0.0402000000000000,0.0282000000000000,0.0704000000000000,0.0516000000000000,0.0368000000000000,0.0931000000000000,0.0392000000000000,0.0493000000000000,0.0636000000000000,0.0565000000000000,0.0275000000000000,0.140100000000000,0.0350000000000000,0.0469000000000000,0.0376000000000000,0.0587000000000000,0.0489000000000000,0.0411000000000000,0.00790000000000000,0.0274000000000000;0.0359000000000000,0.0250000000000000,0.0398000000000000,0.0461000000000000,0.0251000000000000,0.0372000000000000,0.0552000000000000,0.0388000000000000,0.0464000000000000,0.0288000000000000,0.0289000000000000,0.0350000000000000,0.293200000000000,0.0467000000000000,0.0374000000000000,0.0450000000000000,0.0509000000000000,0.0407000000000000,0.0184000000000000,0.0255000000000000;0.0340000000000000,0.0195000000000000,0.0326000000000000,0.0940000000000000,0.0325000000000000,0.0600000000000000,0.0257000000000000,0.0369000000000000,0.0650000000000000,0.0622000000000000,0.0310000000000000,0.0469000000000000,0.0467000000000000,0.117700000000000,0.0530000000000000,0.0671000000000000,0.0458000000000000,0.0388000000000000,0.0394000000000000,0.0514000000000000;0.0451000000000000,0.0208000000000000,0.0455000000000000,0.0521000000000000,0.0375000000000000,0.0536000000000000,0.0253000000000000,0.0357000000000000,0.0857000000000000,0.0632000000000000,0.0241000000000000,0.0376000000000000,0.0374000000000000,0.0530000000000000,0.191700000000000,0.0547000000000000,0.0375000000000000,0.0524000000000000,0.0135000000000000,0.0336000000000000;0.0719000000000000,0.0377000000000000,0.0527000000000000,0.0542000000000000,0.0481000000000000,0.0385000000000000,0.0554000000000000,0.0462000000000000,0.0573000000000000,0.00370000000000000,0.0490000000000000,0.0587000000000000,0.0450000000000000,0.0671000000000000,0.0547000000000000,0.132300000000000,0.0677000000000000,0.0189000000000000,0.00970000000000000,0.0312000000000000;0.0514000000000000,0.0453000000000000,0.0401000000000000,0.0450000000000000,0.0417000000000000,0.0348000000000000,0.0458000000000000,0.0452000000000000,0.0495000000000000,0.0457000000000000,0.0503000000000000,0.0489000000000000,0.0509000000000000,0.0458000000000000,0.0375000000000000,0.0677000000000000,0.116700000000000,0.0746000000000000,0.0348000000000000,0.0281000000000000;0.0633000000000000,0.0409000000000000,0.0430000000000000,0.0396000000000000,0.0678000000000000,0.00150000000000000,0.0333000000000000,0.117300000000000,0.00950000000000000,0.00120000000000000,0.0714000000000000,0.0411000000000000,0.0407000000000000,0.0388000000000000,0.0524000000000000,0.0189000000000000,0.0746000000000000,0.141900000000000,0.0420000000000000,0.0608000000000000;0.0106000000000000,0.0299000000000000,0.00790000000000000,0.0109000000000000,0.0463000000000000,0.0101000000000000,0.0426000000000000,0.00890000000000000,0.0123000000000000,0.0121000000000000,0.305100000000000,0.00790000000000000,0.0184000000000000,0.0394000000000000,0.0135000000000000,0.00970000000000000,0.0348000000000000,0.0420000000000000,0.178900000000000,0.158800000000000;0.0313000000000000,0.0267000000000000,0.0240000000000000,0.0274000000000000,0.0901000000000000,0.0273000000000000,0.0592000000000000,0.0378000000000000,0.0300000000000000,0.0379000000000000,0.0477000000000000,0.0274000000000000,0.0255000000000000,0.0514000000000000,0.0336000000000000,0.0312000000000000,0.0281000000000000,0.0608000000000000,0.158800000000000,0.144000000000000;];
%         end
% %     case 'Manny'    
%     otherwise
% end

Sequences=char({Alignment.Sequence}')';

if ~exist('classes','var')
    if sum(ismember(cellstr(Sequences(1,:)'),{'A','T','U','G','C','-'})) / ...
            length(Sequences(1,:)) > 0.9
        classes=eye(4);
    else
        classes=(eye(20));
    end
end

switch Method
    case 'Shannon'
        if sum(ismember(cellstr(Sequences(1,:)'),{'A','T','U','G','C','-'})) / ...
                length(Sequences(1,:)) > 0.9
            Counts(size(Sequences,1))=basecount(Sequences(size(Sequences,1),:),...
                'Ambiguous',ambiguous,'Gaps',Gaps);
            for i=1:size(Sequences,1)-1;
                Counts(i)=basecount(Sequences(i,:),'Ambiguous',ambiguous,'Gaps',Gaps);
            end
        else
            Counts(size(Sequences,1))=aacount(Sequences(size(Sequences,1),:),'Gaps',Gaps);
            for i=1:size(Sequences,1)-1;
                Counts(i)=aacount(Sequences(i,:),'gaps',Gaps);
            end
        end
        Freqs=squeeze(cell2mat(struct2cell(Counts)))/size(Sequences,2);
        
        if Gaps
           Freqs=Freqs+repmat(Freqs(end,:)/4,size(Freqs,1),1);
           Freqs(end,:)=[];
        end
        F=zeros(size(classes,2),size(Freqs,2));
        for j=1:size(classes,2)
            F(j,:)=sum(Freqs(logical(classes(:,j)),:),1);
        end
        
        if normalize_flag
          F=F./repmat(sum(F,1),size(F,1),1); 
        end
        
        F(F==0)=NaN;
        H=F.*log2(F);
        H(isnan(H))=0;
        Variability=-sum(H,1);
        
    case 'Lichtarge35'
        dSequences=double(lower(Sequences));
        numAA=20;
        N=zeros(numAA,numAA,size(Sequences,1));
        Haa=zeros(numAA,numAA,size(Sequences,1));
        MaxPairs=length(Alignment)*(length(Alignment)-1)/2;
        H_w_gaps=hist(dSequences',21);
        H=H_w_gaps(2:end,:);
        Hgaps=H_w_gaps(1,:);
%         if strcmpi(Gaps,'false')
%             H=H(2:end,:);
%         end
%             %numAA=21;
%         else
%             %dSequences(dSequences==45)=NaN;
%         end
%         
%         %dSequences=dSequences-96;
%         %H=hist(dSequences',numAA);
        for l=1:size(N,3)
            for h=1:numAA
                for k=1:h-1
                    N(h,k,l)=H(h,l)*H(k,l);
                end
                N(h,h,l)=H(h,l)*(H(h,l)-1)/2;
            end
        end
       %Feature, count only non-gapped sequences in Max pairs??
        P=N/MaxPairs;
        Hl=zeros(1,size(N,3));
        for l=1:size(N,3)
            Haa(:,:,l)=P(:,:,l).*log(P(:,:,l)./Q);
            Haa_single=Haa(:,:,l);            
            Haa_single(isnan(Haa_single))=0;
            for h=1:20
                Hl(l)=Hl(l)-sum(Haa_single(h,1:h));
            end
                    
        end
        if strcmpi(Gaps,'true')
            fGaps=Hgaps/length(Alignment);
            Variability=Hl+abs(Hl./(1-fGaps)-Hl);
%             fGaps.*abs(Hl)
%             Variability=Hl./(1-fGaps);
        else
            Variability=Hl;
        end
    case {'Manny2','Manny20'}
        %hard code in two classes, hydrophobic for now
 
        if sum(ismember(cellstr(Sequences(1,:)'),{'A','T','U','G','C','-'})) / ...
                length(Sequences(1,:)) > 0.9
            Counts(size(Sequences,1))=basecount(Sequences(size(Sequences,1),:),...
                'Ambiguous','individual','Gaps',Gaps);
            for i=1:size(Sequences,1)-1;
                Counts(i)=basecount(Sequences(i,:),'Ambiguous','individual','Gaps',Gaps);
            end
        else
            Counts(size(Sequences,1))=aacount(Sequences(size(Sequences,1),:),'Gaps',Gaps);
            for i=1:size(Sequences,1)-1;
                Counts(i)=aacount(Sequences(i,:),'gaps',Gaps);
            end
        end
     
        if strcmp(Method,'Manny2')
            Freqs=squeeze(cell2mat(struct2cell(Counts)))/size(Sequences,2);
            %         if size(classes,2)==2
            %
            %
            %         else
            %             classes=zeros(20,2);
            %             classes(:,1)=[1 0 0 0 0 0 0 1 0 1 1 0 1 1 1 0 0 1 1 1];
            %             classes(:,2)=~[1 0 0 0 0 0 0 1 0 1 1 0 1 1 1 0 0 1 1 1];
            %         end
            
            %hard code, divide freqs into hydrophobic, hydrophillic
            %         hydrophobic=logical([1 0 0 0 0 0 0 1 0 1 1 0 1 1 1 0 0 1 1 1]);
            f1=sum(Freqs(logical(classes(:,1)),:));
            
            if normalize_flag
                f2=sum(Freqs(logical(classes(:,2)),:));
                f1=f1./(f1+f2);
            end
            
            %         f1(f1==1)=.5;
            P21max=f1./(1-f1);
            P21max(P21max>1)=1;
            I=[0.3,0.5,0.7,0.9];
            %         c=colormap;
            Variability=zeros(size(Sequences,1),length(I)+1);
            F=[f1;1-f1];
            for i=1:length(I)
                P21=I(i)*P21max;
                P=zeros(2,2,size(Sequences,1));
                P(2,1,:)=P21;
                P(2,2,:)=1-P21;
                P(1,2,:)=P21.*(1-f1)./f1;
                P(1,1,:)=1-P(1,2,:);
                
                Hi=-sum(P.*(log(P)),2)/log(2);
                Variability(:,i)=sum(F.*squeeze(Hi))';
                %             Variability(:,i)=variability';
            end
            Variability(isnan(Variability))=0;
            %         Variability=sum(repmat(Hi',1, length(Freqs)) .* Freqs);
            %         Hi=-1/log(2)*sum(Q.*log(Q));
            F(F==0)=NaN;
            H=F.*log2(F);
            H(isnan(H))=0;
            variability=-sum(H,1)';
            Variability(:,end)=variability;
        else
           classes=[eye(20);0.05*ones(1,20)];
           Variability=mutation_entropy(Sequences,classes,num_iterations)/log(2);
        end
        figure()
        subplot(2,1,1),plot(Variability)
        %legend({'30% P21Max','50% P21Max','70% P21Max','Shannon'},'Location','EastOutside')
        xlabel('Alignment Index')
        ylabel('Entropy')
        title('Various Entropy Measures for Ribosomal Protein ')
        h=get(gca,'Children');
        set(h(1),'Color','k')
        set(h(1),'LineWidth',2)
        
        subplot(2,1,2),plot(Variability(:,end),Variability(:,1:end),'.')    
%         legend({'0.1%','1%','10%','30% P21Max','50% P21Max','70% P21Max','90%','99%','99.9%','Shannon'},'Location','NorthWest')
%         legend on        
        xlabel('Shannon Entropy')
        ylabel('Entropy')        
        title('Various Entropy Measures vs. Shannon Entropy [Correlation Plot]')
        h=get(gca,'Children');
        set(h(1),'Color','k')
        set(h(1),'LineWidth',2)
        
        Variability=Variability';
    case 'mutation-based'
        
        
        
end


end